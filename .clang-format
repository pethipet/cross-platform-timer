Language:        Cpp
# BasedOnStyle:  LLVM
AccessModifierOffset: -8                        # as indentation is 8, it should be -8
AlignAfterOpenBracket: Align
AlignArrayOfStructures: Right                   # it is more readable when aligned
AlignConsecutiveAssignments:                    # 6.4.1.1.6 [rule - mandatory] Spaces before and after the ’becomes’ (=), try to align the ’=’ as much as possible.
  Enabled:         true
  AcrossEmptyLines: true
  AcrossComments:  true
  AlignCompound:   true
  PadOperators:    true
AlignConsecutiveBitFields:
  Enabled:         true
  AcrossEmptyLines: true
  AcrossComments:  true
  AlignCompound:   true
  PadOperators:    true
AlignConsecutiveDeclarations:
  Enabled:         true
  AcrossEmptyLines: true
  AcrossComments:  true
  AlignCompound:   true
  PadOperators:    true
AlignConsecutiveMacros:
  Enabled:         true
  AcrossEmptyLines: false
  AcrossComments:  true
  AlignCompound:   false
  PadOperators:    false
AlignEscapedNewlines: Right
AlignOperands:   Align
AlignTrailingComments: true                     # 6.5.3.1.1 [example] Alignment of comments
AllowAllArgumentsOnNextLine: false              # 6.6.1.1.2 [rule - advisory] Function definition on a single line
AllowAllParametersOfDeclarationOnNextLine: false  # # 6.6.1.1.2 [rule - advisory] Function definition on a single line
AllowShortEnumsOnASingleLine: false
AllowShortBlocksOnASingleLine: Never
AllowShortCaseLabelsOnASingleLine: false
AllowShortFunctionsOnASingleLine: None
AllowShortLambdasOnASingleLine: None
AllowShortIfStatementsOnASingleLine: Never
AllowShortLoopsOnASingleLine: false
AlwaysBreakAfterDefinitionReturnType: None
AlwaysBreakAfterReturnType: None      # No oneliners
AlwaysBreakBeforeMultilineStrings: false
AlwaysBreakTemplateDeclarations: Yes            # According the example
AttributeMacros:
  - __capability
BinPackArguments: false                         # in case of multiline all arguments but the first one should be on a new line
BinPackParameters: false                        # in case of multiline all parameters but the first one should be on a new line
# BraceWrapping:  # ignoring because BreakBeforeBraces: Allman fits our needs
#  AfterCaseLabel:  false
#  AfterClass:      false
#  AfterControlStatement: Never
#  AfterEnum:       false
#  AfterFunction:   false
#  AfterNamespace:  false
#  AfterObjCDeclaration: false
#  AfterStruct:     false
#  AfterUnion:      false
#  AfterExternBlock: false
#  BeforeCatch:     false
#  BeforeElse:      false
#  BeforeLambdaBody: false
#  BeforeWhile:     false
#  IndentBraces:    false
#  SplitEmptyFunction: true
#  SplitEmptyRecord: true
#  SplitEmptyNamespace: true
BreakBeforeBinaryOperators: NonAssignment       # assignment operator should be on the same line
BreakBeforeConceptDeclarations: Always
BreakBeforeBraces: Allman                       # every block brace should be on a new line
BreakBeforeInheritanceComma: false
BreakInheritanceList: AfterComma
BreakBeforeTernaryOperators: false              # ternary operator should be on the same line
BreakConstructorInitializersBeforeComma: false
BreakConstructorInitializers: AfterColon
BreakAfterJavaFieldAnnotations: false
BreakStringLiterals: true
ColumnLimit:     160
# CommentPragmas:  '^ IWYU pragma:'             # we don't have custom pragmas for clang-format
QualifierAlignment: Leave                       # not defined in standard,
CompactNamespaces: false
ConstructorInitializerIndentWidth: 8            # all indentations are 8 based
ContinuationIndentWidth: 8                      # all indentations are 8 based
Cpp11BracedListStyle: true
DeriveLineEnding: false                         # UseCRLF is used instead
DerivePointerAlignment: false                   # PointerAlignment is used instead
DisableFormat:   false
EmptyLineAfterAccessModifier: Never
EmptyLineBeforeAccessModifier: LogicalBlock
ExperimentalAutoDetectBinPacking: false
PackConstructorInitializers: CurrentLine        # one line if fit, new lines otherwise
BasedOnStyle:    ''
ConstructorInitializerAllOnOneLineOrOnePerLine: false # deprecated
AllowAllConstructorInitializersOnNextLine: true       # deprecated
FixNamespaceComments: true
ForEachMacros:
  - foreach
  - Q_FOREACH
  - BOOST_FOREACH
IfMacros:
  - KJ_IF_MAYBE
IncludeBlocks: Regroup
IncludeCategories:
  - Regex:           '^"(llvm|llvm-c|clang|clang-c)/'
    Priority:        2
    SortPriority:    0
    CaseSensitive:   false
  - Regex:           '^(<|"(gtest|gmock|isl|json)/)'
    Priority:        3
    SortPriority:    0
    CaseSensitive:   false
  - Regex:           '.*'
    Priority:        1
    SortPriority:    0
    CaseSensitive:   false
IncludeIsMainRegex: '(Test)?$'
IncludeIsMainSourceRegex: ''
IndentAccessModifiers: false
IndentCaseLabels: false
IndentCaseBlocks: false
IndentGotoLabels: true
IndentPPDirectives: AfterHash
IndentExternBlock: AfterExternBlock
IndentRequiresClause: true
IndentWidth: 8
IndentWrappedFunctionNames: false
InsertBraces:    false                         # it's mentioned that it's dangerous but it's of our standard
InsertTrailingCommas: None
JavaScriptQuotes: Leave
JavaScriptWrapImports: true
KeepEmptyLinesAtTheStartOfBlocks: true
LambdaBodyIndentation: Signature
MacroBlockBegin: ''
MacroBlockEnd:   ''
MaxEmptyLinesToKeep: 1
NamespaceIndentation: None
# ObjC are note related to us
ObjCBinPackProtocolList: Auto
ObjCBlockIndentWidth: 2
ObjCBreakBeforeNestedBlockParam: true
ObjCSpaceAfterProperty: false
ObjCSpaceBeforeProtocolList: true
# ObjC end
PenaltyBreakAssignment: 2
PenaltyBreakBeforeFirstCallParameter: 19
PenaltyBreakComment: 300
PenaltyBreakFirstLessLess: 120
PenaltyBreakOpenParenthesis: 0
PenaltyBreakString: 1000
PenaltyBreakTemplateDeclaration: 10
PenaltyExcessCharacter: 1000000
PenaltyReturnTypeOnItsOwnLine: 60
PenaltyIndentedWhitespace: 0
PointerAlignment: Middle
PPIndentWidth:   -1
ReferenceAlignment: Pointer
ReflowComments:  true
RemoveBracesLLVM: false
RequiresClausePosition: OwnLine
SeparateDefinitionBlocks: Leave
ShortNamespaceLines: 1
SortIncludes: CaseSensitive
SortJavaStaticImport: Before
SortUsingDeclarations: true
SpaceAfterCStyleCast: false
SpaceAfterLogicalNot: false
SpaceAfterTemplateKeyword: true
SpaceBeforeAssignmentOperators: true
SpaceBeforeCaseColon: false
SpaceBeforeCpp11BracedList: false
SpaceBeforeCtorInitializerColon: true
SpaceBeforeInheritanceColon: true
SpaceBeforeParens: ControlStatements
#SpaceBeforeParensOptions:              # SpaceBeforeParens is not Custom
#  AfterControlStatements: true
#  AfterForeachMacros: true
#  AfterFunctionDefinitionName: false
#  AfterFunctionDeclarationName: false
#  AfterIfMacros:   true
#  AfterOverloadedOperator: false
#  AfterRequiresInClause: false
#  AfterRequiresInExpression: false
#  BeforeNonEmptyParentheses: false
SpaceAroundPointerQualifiers: Both        # Spaces should be around `*`
SpaceBeforeRangeBasedForLoopColon: true
SpaceInEmptyBlock: false
SpaceInEmptyParentheses: false
SpacesBeforeTrailingComments: 4
SpacesInAngles:  Never
SpacesInConditionalStatement: false
SpacesInContainerLiterals: true
SpacesInCStyleCastParentheses: false
SpacesInLineCommentPrefix:
  Minimum:         1
  Maximum:         -1
SpacesInParentheses: false
SpacesInSquareBrackets: false
SpaceBeforeSquareBrackets: false
BitFieldColonSpacing: Both
Standard:        c++14
StatementAttributeLikeMacros:
  - Q_EMIT
StatementMacros:
  - Q_UNUSED
  - QT_REQUIRE_VERSION
TabWidth:        4
UseCRLF:         false
UseTab:          Never
WhitespaceSensitiveMacros:
  - STRINGIZE
  - PP_STRINGIZE
  - BOOST_PP_STRINGIZE
  - NS_SWIFT_NAME
  - CF_SWIFT_NAME
---
